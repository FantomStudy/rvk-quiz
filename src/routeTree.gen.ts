/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as HeaderLayoutRouteImport } from './routes/_headerLayout'
import { Route as HeaderLayoutIndexRouteImport } from './routes/_headerLayout/index'
import { Route as HeaderLayoutTestRouteImport } from './routes/_headerLayout/test'
import { Route as HeaderLayoutResultRouteImport } from './routes/_headerLayout/result'
import { Route as HeaderLayoutCompleteRouteImport } from './routes/_headerLayout/complete'
import { Route as HeaderLayoutAdminRouteImport } from './routes/_headerLayout/admin'
import { Route as HeaderLayoutAdminLayoutRouteImport } from './routes/_headerLayout/_adminLayout'
import { Route as HeaderLayoutAdminLayoutAdminDashboardRouteImport } from './routes/_headerLayout/_adminLayout/admin/dashboard'
import { Route as HeaderLayoutAdminLayoutAdminUserIdNominationIdRouteImport } from './routes/_headerLayout/_adminLayout/admin/$userId.$nominationId'

const HeaderLayoutRoute = HeaderLayoutRouteImport.update({
  id: '/_headerLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const HeaderLayoutIndexRoute = HeaderLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HeaderLayoutRoute,
} as any)
const HeaderLayoutTestRoute = HeaderLayoutTestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => HeaderLayoutRoute,
} as any)
const HeaderLayoutResultRoute = HeaderLayoutResultRouteImport.update({
  id: '/result',
  path: '/result',
  getParentRoute: () => HeaderLayoutRoute,
} as any)
const HeaderLayoutCompleteRoute = HeaderLayoutCompleteRouteImport.update({
  id: '/complete',
  path: '/complete',
  getParentRoute: () => HeaderLayoutRoute,
} as any)
const HeaderLayoutAdminRoute = HeaderLayoutAdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => HeaderLayoutRoute,
} as any)
const HeaderLayoutAdminLayoutRoute = HeaderLayoutAdminLayoutRouteImport.update({
  id: '/_adminLayout',
  getParentRoute: () => HeaderLayoutRoute,
} as any)
const HeaderLayoutAdminLayoutAdminDashboardRoute =
  HeaderLayoutAdminLayoutAdminDashboardRouteImport.update({
    id: '/admin/dashboard',
    path: '/admin/dashboard',
    getParentRoute: () => HeaderLayoutAdminLayoutRoute,
  } as any)
const HeaderLayoutAdminLayoutAdminUserIdNominationIdRoute =
  HeaderLayoutAdminLayoutAdminUserIdNominationIdRouteImport.update({
    id: '/admin/$userId/$nominationId',
    path: '/admin/$userId/$nominationId',
    getParentRoute: () => HeaderLayoutAdminLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/admin': typeof HeaderLayoutAdminRoute
  '/complete': typeof HeaderLayoutCompleteRoute
  '/result': typeof HeaderLayoutResultRoute
  '/test': typeof HeaderLayoutTestRoute
  '/': typeof HeaderLayoutIndexRoute
  '/admin/dashboard': typeof HeaderLayoutAdminLayoutAdminDashboardRoute
  '/admin/$userId/$nominationId': typeof HeaderLayoutAdminLayoutAdminUserIdNominationIdRoute
}
export interface FileRoutesByTo {
  '/admin': typeof HeaderLayoutAdminRoute
  '/complete': typeof HeaderLayoutCompleteRoute
  '/result': typeof HeaderLayoutResultRoute
  '/test': typeof HeaderLayoutTestRoute
  '/': typeof HeaderLayoutIndexRoute
  '/admin/dashboard': typeof HeaderLayoutAdminLayoutAdminDashboardRoute
  '/admin/$userId/$nominationId': typeof HeaderLayoutAdminLayoutAdminUserIdNominationIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_headerLayout': typeof HeaderLayoutRouteWithChildren
  '/_headerLayout/_adminLayout': typeof HeaderLayoutAdminLayoutRouteWithChildren
  '/_headerLayout/admin': typeof HeaderLayoutAdminRoute
  '/_headerLayout/complete': typeof HeaderLayoutCompleteRoute
  '/_headerLayout/result': typeof HeaderLayoutResultRoute
  '/_headerLayout/test': typeof HeaderLayoutTestRoute
  '/_headerLayout/': typeof HeaderLayoutIndexRoute
  '/_headerLayout/_adminLayout/admin/dashboard': typeof HeaderLayoutAdminLayoutAdminDashboardRoute
  '/_headerLayout/_adminLayout/admin/$userId/$nominationId': typeof HeaderLayoutAdminLayoutAdminUserIdNominationIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/complete'
    | '/result'
    | '/test'
    | '/'
    | '/admin/dashboard'
    | '/admin/$userId/$nominationId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/admin'
    | '/complete'
    | '/result'
    | '/test'
    | '/'
    | '/admin/dashboard'
    | '/admin/$userId/$nominationId'
  id:
    | '__root__'
    | '/_headerLayout'
    | '/_headerLayout/_adminLayout'
    | '/_headerLayout/admin'
    | '/_headerLayout/complete'
    | '/_headerLayout/result'
    | '/_headerLayout/test'
    | '/_headerLayout/'
    | '/_headerLayout/_adminLayout/admin/dashboard'
    | '/_headerLayout/_adminLayout/admin/$userId/$nominationId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  HeaderLayoutRoute: typeof HeaderLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_headerLayout': {
      id: '/_headerLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof HeaderLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_headerLayout/': {
      id: '/_headerLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof HeaderLayoutIndexRouteImport
      parentRoute: typeof HeaderLayoutRoute
    }
    '/_headerLayout/test': {
      id: '/_headerLayout/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof HeaderLayoutTestRouteImport
      parentRoute: typeof HeaderLayoutRoute
    }
    '/_headerLayout/result': {
      id: '/_headerLayout/result'
      path: '/result'
      fullPath: '/result'
      preLoaderRoute: typeof HeaderLayoutResultRouteImport
      parentRoute: typeof HeaderLayoutRoute
    }
    '/_headerLayout/complete': {
      id: '/_headerLayout/complete'
      path: '/complete'
      fullPath: '/complete'
      preLoaderRoute: typeof HeaderLayoutCompleteRouteImport
      parentRoute: typeof HeaderLayoutRoute
    }
    '/_headerLayout/admin': {
      id: '/_headerLayout/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof HeaderLayoutAdminRouteImport
      parentRoute: typeof HeaderLayoutRoute
    }
    '/_headerLayout/_adminLayout': {
      id: '/_headerLayout/_adminLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof HeaderLayoutAdminLayoutRouteImport
      parentRoute: typeof HeaderLayoutRoute
    }
    '/_headerLayout/_adminLayout/admin/dashboard': {
      id: '/_headerLayout/_adminLayout/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof HeaderLayoutAdminLayoutAdminDashboardRouteImport
      parentRoute: typeof HeaderLayoutAdminLayoutRoute
    }
    '/_headerLayout/_adminLayout/admin/$userId/$nominationId': {
      id: '/_headerLayout/_adminLayout/admin/$userId/$nominationId'
      path: '/admin/$userId/$nominationId'
      fullPath: '/admin/$userId/$nominationId'
      preLoaderRoute: typeof HeaderLayoutAdminLayoutAdminUserIdNominationIdRouteImport
      parentRoute: typeof HeaderLayoutAdminLayoutRoute
    }
  }
}

interface HeaderLayoutAdminLayoutRouteChildren {
  HeaderLayoutAdminLayoutAdminDashboardRoute: typeof HeaderLayoutAdminLayoutAdminDashboardRoute
  HeaderLayoutAdminLayoutAdminUserIdNominationIdRoute: typeof HeaderLayoutAdminLayoutAdminUserIdNominationIdRoute
}

const HeaderLayoutAdminLayoutRouteChildren: HeaderLayoutAdminLayoutRouteChildren =
  {
    HeaderLayoutAdminLayoutAdminDashboardRoute:
      HeaderLayoutAdminLayoutAdminDashboardRoute,
    HeaderLayoutAdminLayoutAdminUserIdNominationIdRoute:
      HeaderLayoutAdminLayoutAdminUserIdNominationIdRoute,
  }

const HeaderLayoutAdminLayoutRouteWithChildren =
  HeaderLayoutAdminLayoutRoute._addFileChildren(
    HeaderLayoutAdminLayoutRouteChildren,
  )

interface HeaderLayoutRouteChildren {
  HeaderLayoutAdminLayoutRoute: typeof HeaderLayoutAdminLayoutRouteWithChildren
  HeaderLayoutAdminRoute: typeof HeaderLayoutAdminRoute
  HeaderLayoutCompleteRoute: typeof HeaderLayoutCompleteRoute
  HeaderLayoutResultRoute: typeof HeaderLayoutResultRoute
  HeaderLayoutTestRoute: typeof HeaderLayoutTestRoute
  HeaderLayoutIndexRoute: typeof HeaderLayoutIndexRoute
}

const HeaderLayoutRouteChildren: HeaderLayoutRouteChildren = {
  HeaderLayoutAdminLayoutRoute: HeaderLayoutAdminLayoutRouteWithChildren,
  HeaderLayoutAdminRoute: HeaderLayoutAdminRoute,
  HeaderLayoutCompleteRoute: HeaderLayoutCompleteRoute,
  HeaderLayoutResultRoute: HeaderLayoutResultRoute,
  HeaderLayoutTestRoute: HeaderLayoutTestRoute,
  HeaderLayoutIndexRoute: HeaderLayoutIndexRoute,
}

const HeaderLayoutRouteWithChildren = HeaderLayoutRoute._addFileChildren(
  HeaderLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  HeaderLayoutRoute: HeaderLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
